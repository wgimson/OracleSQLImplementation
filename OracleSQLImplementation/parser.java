
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 28 19:16:54 EST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 28 19:16:54 EST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\006\000\002\004\011\000" +
    "\002\005\004\000\002\005\006\000\002\006\006\000\002" +
    "\006\003\000\002\006\003\000\002\012\015\000\002\007" +
    "\003\000\002\007\005\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\011\010\000\002\013\005\000\002\013\005\000\002" +
    "\013\007\000\002\013\007\000\002\014\011\000\002\015" +
    "\005\000\002\015\005\000\002\015\007\000\002\015\007" +
    "\000\002\016\007\000\002\016\011\000\002\017\003\000" +
    "\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\014\020\005\023\016\026\013\031\007\033" +
    "\015\001\002\000\004\002\001\001\002\000\006\021\114" +
    "\022\113\001\002\000\004\002\ufffe\001\002\000\004\017" +
    "\074\001\002\000\004\002\ufffd\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\073\001\002\000\004\027\066\001" +
    "\002\000\004\002\ufffc\001\002\000\006\012\023\017\025" +
    "\001\002\000\004\024\020\001\002\000\004\002\ufffb\001" +
    "\002\000\004\017\021\001\002\000\004\005\022\001\002" +
    "\000\006\012\023\017\025\001\002\000\010\006\ufff0\007" +
    "\ufff0\027\ufff0\001\002\000\006\006\027\007\026\001\002" +
    "\000\010\006\ufff2\007\ufff2\027\ufff2\001\002\000\004\017" +
    "\042\001\002\000\004\025\030\001\002\000\004\005\031" +
    "\001\002\000\006\015\034\016\032\001\002\000\006\006" +
    "\uffef\007\uffef\001\002\000\006\006\036\007\035\001\002" +
    "\000\006\006\uffee\007\uffee\001\002\000\006\015\041\016" +
    "\040\001\002\000\004\010\037\001\002\000\004\002\ufff3" +
    "\001\002\000\006\006\uffed\007\uffed\001\002\000\006\006" +
    "\uffec\007\uffec\001\002\000\010\006\ufff1\007\ufff1\027\ufff1" +
    "\001\002\000\006\007\026\027\044\001\002\000\004\017" +
    "\046\001\002\000\010\007\047\010\051\030\050\001\002" +
    "\000\010\007\uffdf\010\uffdf\030\uffdf\001\002\000\004\017" +
    "\065\001\002\000\004\017\053\001\002\000\004\002\uffe1" +
    "\001\002\000\006\010\060\037\057\001\002\000\004\014" +
    "\054\001\002\000\006\015\056\016\055\001\002\000\006" +
    "\010\uffea\037\uffea\001\002\000\006\010\uffe9\037\uffe9\001" +
    "\002\000\004\017\061\001\002\000\004\002\uffe0\001\002" +
    "\000\004\014\062\001\002\000\006\015\064\016\063\001" +
    "\002\000\006\010\uffe8\037\uffe8\001\002\000\006\010\uffe7" +
    "\037\uffe7\001\002\000\010\007\uffde\010\uffde\030\uffde\001" +
    "\002\000\004\017\067\001\002\000\004\030\070\001\002" +
    "\000\004\017\053\001\002\000\006\010\072\037\057\001" +
    "\002\000\004\002\uffeb\001\002\000\004\002\000\001\002" +
    "\000\004\032\075\001\002\000\004\017\077\001\002\000" +
    "\006\007\103\030\104\001\002\000\004\014\100\001\002" +
    "\000\006\015\102\016\101\001\002\000\006\007\uffe5\030" +
    "\uffe5\001\002\000\006\007\uffe4\030\uffe4\001\002\000\004" +
    "\017\107\001\002\000\004\017\053\001\002\000\006\010" +
    "\106\037\057\001\002\000\004\002\uffe6\001\002\000\004" +
    "\014\110\001\002\000\006\015\112\016\111\001\002\000" +
    "\006\007\uffe3\030\uffe3\001\002\000\006\007\uffe2\030\uffe2" +
    "\001\002\000\004\017\135\001\002\000\004\017\115\001" +
    "\002\000\004\005\116\001\002\000\004\017\120\001\002" +
    "\000\006\006\131\007\130\001\002\000\010\034\123\035" +
    "\122\036\124\001\002\000\006\006\ufff8\007\ufff8\001\002" +
    "\000\006\006\ufff5\007\ufff5\001\002\000\004\005\125\001" +
    "\002\000\006\006\ufff4\007\ufff4\001\002\000\004\015\126" +
    "\001\002\000\004\006\127\001\002\000\006\006\ufff6\007" +
    "\ufff6\001\002\000\004\017\133\001\002\000\004\010\132" +
    "\001\002\000\004\002\ufff9\001\002\000\010\034\123\035" +
    "\122\036\124\001\002\000\006\006\ufff7\007\ufff7\001\002" +
    "\000\004\010\136\001\002\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\020\002\011\003\003\004\010\011\007\012" +
    "\005\014\013\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\116\001\001" +
    "\000\002\001\001\000\004\006\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
            }
        }
        m.append(" : " + message);
        //System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)
        throws Exception {
        report_error(message, info);
        Exception e = null;
        throw e;
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tbl_list ::= tbl_list COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int tblLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tblLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> tblL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> tbls = new ArrayList<String>();
       tbls.addAll(tblL);
       tbls.add(tblName);
       RESULT = tbls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tbl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tbl_list ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> tbls = new ArrayList<String>();
       tbls.add(tblName);
       RESULT = tbls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tbl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // select_expr ::= SELECT attr_list FROM tbl_list WHERE condition SEMI 
            {
              Relation RESULT =null;
		int attrLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int attrLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> attrL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tblLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tblLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> tblL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Condition> cond = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Relation rel = GrammarDriver.SQLSelect(attrL, cond, tblL);
       RESULT = rel; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // select_expr ::= SELECT attr_list FROM tbl_list SEMI 
            {
              Relation RESULT =null;
		int attrLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int attrLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> attrL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tblLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tblLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> tblL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Relation rel = GrammarDriver.SQLSelect(attrL, tblL);
       RESULT = rel; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // set_expr ::= set_expr COMMA VARIABLE COMPARISON NUMBER 
            {
              ArrayList<Condition> RESULT =null;
		int setEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int setEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Condition> setE = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> sets = new ArrayList<Condition>();
       Condition set = new Condition(attr, comp, val);
       sets.addAll(setE);
       sets.add(set);
       RESULT = sets; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_expr ::= set_expr COMMA VARIABLE COMPARISON STRING 
            {
              ArrayList<Condition> RESULT =null;
		int setEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int setEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Condition> setE = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> sets = new ArrayList<Condition>();
       val = val.substring(1, val.length()-1);
       Condition set = new Condition(attr, comp, val);
       sets.addAll(setE);
       sets.add(set);
       RESULT = sets; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // set_expr ::= VARIABLE COMPARISON NUMBER 
            {
              ArrayList<Condition> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> sets = new ArrayList<Condition>();
       Condition set = new Condition(attr, comp, val);
       sets.add(set);
       RESULT = sets; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // set_expr ::= VARIABLE COMPARISON STRING 
            {
              ArrayList<Condition> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> sets = new ArrayList<Condition>();
       val = val.substring(1, val.length()-1);
       Condition set = new Condition(attr, comp, val);
       sets.add(set);
       RESULT = sets; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // update_expr ::= UPDATE VARIABLE SET set_expr WHERE condition SEMI 
            {
              Relation RESULT =null;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int setEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int setEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Condition> setE = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Condition> cond = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Relation r = GrammarDriver.update(tblName, setE, cond);
       RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= condition AND VARIABLE COMPARISON NUMBER 
            {
              ArrayList<Condition> RESULT =null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Condition> conds = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> condsList = new ArrayList<Condition>();
       Condition cond = new Condition(attr, comp, val);
       condsList.addAll(conds);
       condsList.add(cond);
       RESULT = condsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= condition AND VARIABLE COMPARISON STRING 
            {
              ArrayList<Condition> RESULT =null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Condition> conds = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> condsList = new ArrayList<Condition>();
       val = val.substring(1, val.length() - 1);
       Condition cond = new Condition(attr, comp, val);
       condsList.addAll(conds);
       condsList.add(cond);
       RESULT = condsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= VARIABLE COMPARISON NUMBER 
            {
              ArrayList<Condition> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> condsList = new ArrayList<Condition>();
       Condition cond = new Condition(attr, comp, val);
       condsList.add(cond);
       RESULT = condsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition ::= VARIABLE COMPARISON STRING 
            {
              ArrayList<Condition> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Condition> condsList = new ArrayList<Condition>();
       val = val.substring(1, val.length() - 1);
       Condition cond = new Condition(attr, comp, val);
       condsList.add(cond);
       RESULT = condsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // delete_expr ::= DELETE FROM VARIABLE WHERE condition SEMI 
            {
              Relation RESULT =null;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Condition> conds = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Relation r = GrammarDriver.deleteTuple(tblName, conds);
       RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // values_list ::= values_list COMMA NUMBER 
            {
              ArrayList<String> RESULT =null;
		int valueLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> valueL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> vals = new ArrayList<String>();
       vals.addAll(valueL);
       vals.add(val);
       RESULT = vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // values_list ::= values_list COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int valueLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> valueL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> vals = new ArrayList<String>();
       val = val.substring(1, val.length()-1);
       vals.addAll(valueL);
       vals.add(val);
       RESULT = vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // values_list ::= NUMBER 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> vals = new ArrayList<String>();
       vals.add(val);
       RESULT = vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // values_list ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> vals = new ArrayList<String>();
       val = val.substring(1, val.length()-1);
       vals.add(val);
       RESULT = vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attr_list ::= STAR 
            {
              ArrayList<String> RESULT =null;
		 ArrayList<String> attrs = new ArrayList<String>();
       attrs.add("*");
       RESULT = attrs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // attr_list ::= attr_list COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int attrLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> attrL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attrNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attrNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String attrName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> attrs = new ArrayList<String>();
       attrs.addAll(attrL);
       attrs.add(attrName);
       RESULT = attrs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attr_list ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int attrNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attrNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String attrName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> attrs = new ArrayList<String>();
       attrs.add(attrName);
       RESULT = attrs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // insert_expr ::= INSERT INTO VARIABLE LPAREN attr_list RPAREN VALUES LPAREN values_list RPAREN SEMI 
            {
              Relation RESULT =null;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int attrLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int attrLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> attrL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valueLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> valueL = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Relation r = GrammarDriver.insertTuple(tblName, attrL, valueL);
       RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // attr_type ::= DECIMAL 
            {
              String RESULT =null;
		 String attType = "DECIMAL";
       RESULT = attType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // attr_type ::= INTEGER 
            {
              String RESULT =null;
		 String attType = "INTEGER";
       RESULT  = attType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attr_type ::= VARCHAR LPAREN NUMBER RPAREN 
            {
              String RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String len = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String attType = "VARCHAR(" + len + ")";
       RESULT = attType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // attr_spec ::= attr_spec COMMA VARIABLE attr_type 
            {
              ArrayList<String> RESULT =null;
		int attrSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int attrSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> attrS = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String attT = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> attrSpecs = new ArrayList<String>();
       attrSpecs.addAll(attrS);
       attrSpecs.add(var + " " + attT);
       RESULT = attrSpecs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // attr_spec ::= VARIABLE attr_type 
            {
              ArrayList<String> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String attT = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> attrSpecs = new ArrayList<String>();
       attrSpecs.add(var + " " + attT);
       RESULT = attrSpecs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // create_tbl_expr ::= CREATE TABLE VARIABLE LPAREN attr_spec RPAREN SEMI 
            {
              Relation RESULT =null;
		int tblNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tblNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tblName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int attrSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> attrS = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Relation rel = Relation.createTable(tblName, attrS);
       RESULT = rel; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_tbl_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // create_db_expr ::= CREATE DATABASE VARIABLE SEMI 
            {
              Relation RESULT =null;
		int dbNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dbNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dbName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Relation nullRel = Relation.createDatabase(dbName);
       RESULT = nullRel; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_db_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MOracle_expr ::= select_expr 
            {
              Relation RESULT =null;
		int selectExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int selectExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation selectExpr = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = selectExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MOracle_expr ::= update_expr 
            {
              Relation RESULT =null;
		int updateExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int updateExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation updateExpr = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = updateExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MOracle_expr ::= delete_expr 
            {
              Relation RESULT =null;
		int deleteExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deleteExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation deleteExpr = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = deleteExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MOracle_expr ::= insert_expr 
            {
              Relation RESULT =null;
		int insertExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insertExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation insertExpr = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = insertExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MOracle_expr ::= create_tbl_expr 
            {
              Relation RESULT =null;
		int createTblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int createTblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation createTbl = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = createTbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= MOracle_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Relation start_val = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // MOracle_expr ::= create_db_expr 
            {
              Relation RESULT =null;
		int createDbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int createDbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Relation createDb = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = createDb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOracle_expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

