/* The following code was generated by JFlex 1.4.3 on 11/28/12 7:16 PM */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/12 7:16 PM from the specification file
 * <tt>MOracle.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\13"+
    "\1\64\1\65\1\70\1\0\1\66\1\0\1\12\1\0\12\11\1\0"+
    "\1\67\1\7\1\6\1\10\2\0\1\23\1\31\1\15\1\27\1\21"+
    "\1\57\1\47\1\41\1\43\2\5\1\35\1\51\1\45\1\53\1\63"+
    "\1\5\1\17\1\33\1\25\1\55\1\37\1\61\3\5\4\0\1\5"+
    "\1\0\1\22\1\30\1\14\1\26\1\20\1\56\1\46\1\40\1\42"+
    "\2\4\1\34\1\50\1\44\1\52\1\62\1\4\1\16\1\32\1\24"+
    "\1\54\1\36\1\60\3\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\3\5\1\6\1\7"+
    "\1\1\1\3\1\4\1\3\1\4\1\3\1\4\1\3"+
    "\1\4\1\3\1\4\1\3\1\4\1\3\1\4\1\3"+
    "\1\4\1\3\1\4\1\3\1\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\0\1\6\1\0\1\15\1\3\1\4"+
    "\1\3\1\4\1\3\1\4\2\3\2\4\1\3\1\4"+
    "\1\3\1\4\1\3\1\4\1\3\1\4\1\3\1\4"+
    "\1\3\1\4\1\3\1\4\2\16\1\3\1\4\3\3"+
    "\3\4\1\17\1\3\1\17\1\4\2\3\2\4\2\3"+
    "\2\4\1\3\1\4\1\3\1\4\1\3\1\4\1\3"+
    "\1\4\1\3\1\4\3\3\3\4\1\3\1\4\2\3"+
    "\2\4\1\3\1\20\1\3\1\4\1\20\1\4\1\3"+
    "\1\4\2\21\1\3\1\4\1\3\1\4\2\22\3\3"+
    "\3\4\1\3\1\4\2\3\2\4\2\3\2\4\1\3"+
    "\1\4\2\23\2\24\1\3\1\25\1\3\1\4\1\25"+
    "\1\4\2\26\1\3\1\27\1\4\1\27\1\3\1\30"+
    "\1\4\1\30\2\31\1\32\1\3\1\32\1\4\2\33"+
    "\2\34\2\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\71\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\71\0\71\0\71\0\71\0\71\0\u01c8\0\u01c8\0\u0201"+
    "\0\71\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\253\0\344\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\253\0\u0dce\0\344\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\253\0\u1527"+
    "\0\u1560\0\344\0\u1599\0\u15d2\0\u160b\0\253\0\344\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\253\0\344\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\253"+
    "\0\344\0\253\0\344\0\u1b2a\0\253\0\u1b63\0\u1b9c\0\344"+
    "\0\u1bd5\0\253\0\344\0\u1c0e\0\253\0\u1c47\0\344\0\u1c80"+
    "\0\253\0\u1cb9\0\344\0\253\0\344\0\253\0\u1cf2\0\344"+
    "\0\u1d2b\0\253\0\344\0\253\0\344\0\253\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\5\1\6\1\5"+
    "\1\6\1\17\1\20\1\21\1\22\1\23\1\24\1\5"+
    "\1\6\1\25\1\26\1\5\1\6\1\27\1\30\1\5"+
    "\1\6\1\31\1\32\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\5\1\6\1\41\1\42\1\43\1\44\1\45"+
    "\73\0\1\4\72\0\2\5\3\0\1\5\2\0\50\5"+
    "\11\0\2\6\3\0\1\6\2\0\50\6\13\0\1\7"+
    "\1\0\1\7\66\0\1\7\73\0\1\12\1\46\67\0"+
    "\1\47\57\0\1\50\2\0\10\50\1\51\55\50\4\0"+
    "\2\5\3\0\1\5\2\0\2\5\2\52\44\5\11\0"+
    "\2\6\3\0\1\6\2\0\2\6\2\53\44\6\11\0"+
    "\2\5\3\0\1\5\2\0\30\5\2\54\16\5\11\0"+
    "\2\6\3\0\1\6\2\0\30\6\2\55\16\6\11\0"+
    "\2\5\3\0\1\5\2\0\6\5\2\56\40\5\11\0"+
    "\2\6\3\0\1\6\2\0\6\6\2\57\40\6\11\0"+
    "\2\5\3\0\1\5\2\0\4\5\2\60\2\61\40\5"+
    "\11\0\2\6\3\0\1\6\2\0\4\6\2\62\2\63"+
    "\40\6\11\0\2\5\3\0\1\5\2\0\4\5\2\64"+
    "\42\5\11\0\2\6\3\0\1\6\2\0\4\6\2\65"+
    "\42\6\11\0\2\5\3\0\1\5\2\0\6\5\2\66"+
    "\40\5\11\0\2\6\3\0\1\6\2\0\6\6\2\67"+
    "\40\6\11\0\2\5\3\0\1\5\2\0\30\5\2\70"+
    "\16\5\11\0\2\6\3\0\1\6\2\0\30\6\2\71"+
    "\16\6\11\0\2\5\3\0\1\5\2\0\46\5\2\72"+
    "\11\0\2\6\3\0\1\6\2\0\46\6\2\73\11\0"+
    "\2\5\3\0\1\5\2\0\2\5\2\74\44\5\11\0"+
    "\2\6\3\0\1\6\2\0\2\6\2\75\44\6\11\0"+
    "\2\5\3\0\1\5\2\0\24\5\2\76\22\5\11\0"+
    "\2\6\3\0\1\6\2\0\24\6\2\77\22\6\11\0"+
    "\2\5\3\0\1\5\2\0\4\5\2\100\42\5\11\0"+
    "\2\6\3\0\1\6\2\0\4\6\2\101\42\6\11\0"+
    "\2\5\3\0\1\5\2\0\12\5\2\102\34\5\11\0"+
    "\2\6\3\0\1\6\2\0\12\6\2\103\34\6\11\0"+
    "\2\5\3\0\1\5\2\0\14\5\2\104\32\5\11\0"+
    "\2\6\3\0\1\6\2\0\14\6\2\105\32\6\11\0"+
    "\2\5\3\0\1\5\2\0\2\106\16\5\2\107\26\5"+
    "\11\0\2\5\3\0\1\5\2\0\10\5\2\110\36\5"+
    "\11\0\2\6\3\0\1\6\2\0\2\111\16\6\2\112"+
    "\26\6\11\0\2\6\3\0\1\6\2\0\10\6\2\113"+
    "\36\6\11\0\2\5\3\0\1\5\2\0\10\5\2\114"+
    "\6\5\2\115\26\5\11\0\2\6\3\0\1\6\2\0"+
    "\10\6\2\116\6\6\2\117\26\6\11\0\2\5\3\0"+
    "\1\5\2\0\2\5\2\120\14\5\2\121\26\5\11\0"+
    "\2\6\3\0\1\6\2\0\2\6\2\122\14\6\2\123"+
    "\26\6\11\0\2\5\3\0\1\5\2\0\10\5\2\124"+
    "\4\5\2\125\30\5\11\0\2\6\3\0\1\6\2\0"+
    "\10\6\2\126\4\6\2\127\30\6\11\0\2\5\3\0"+
    "\1\5\2\0\12\5\2\130\34\5\11\0\2\6\3\0"+
    "\1\6\2\0\12\6\2\131\34\6\11\0\2\5\3\0"+
    "\1\5\2\0\36\5\2\132\10\5\11\0\2\6\3\0"+
    "\1\6\2\0\36\6\2\133\10\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\134\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\135\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\6\5\2\136\40\5\11\0\2\6\3\0"+
    "\1\6\2\0\6\6\2\137\40\6\11\0\2\5\3\0"+
    "\1\5\2\0\20\5\2\140\26\5\11\0\2\6\3\0"+
    "\1\6\2\0\20\6\2\141\26\6\11\0\2\5\3\0"+
    "\1\5\2\0\26\5\2\142\20\5\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\143\42\5\11\0\2\5\3\0"+
    "\1\5\2\0\6\5\2\144\40\5\11\0\2\6\3\0"+
    "\1\6\2\0\26\6\2\145\20\6\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\146\42\6\11\0\2\6\3\0"+
    "\1\6\2\0\6\6\2\147\40\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\150\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\151\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\2\152\46\5\11\0\2\5\3\0\1\5"+
    "\2\0\40\5\2\153\6\5\11\0\2\6\3\0\1\6"+
    "\2\0\2\154\46\6\11\0\2\6\3\0\1\6\2\0"+
    "\40\6\2\155\6\6\11\0\2\5\3\0\1\5\2\0"+
    "\4\5\2\156\30\5\2\157\10\5\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\160\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\161\30\6\2\162\10\6\11\0"+
    "\2\6\3\0\1\6\2\0\4\6\2\163\42\6\11\0"+
    "\2\5\3\0\1\5\2\0\6\5\2\164\40\5\11\0"+
    "\2\6\3\0\1\6\2\0\6\6\2\165\40\6\11\0"+
    "\2\5\3\0\1\5\2\0\34\5\2\166\12\5\11\0"+
    "\2\6\3\0\1\6\2\0\34\6\2\167\12\6\11\0"+
    "\2\5\3\0\1\5\2\0\2\5\2\170\44\5\11\0"+
    "\2\6\3\0\1\6\2\0\2\6\2\171\44\6\11\0"+
    "\2\5\3\0\1\5\2\0\10\5\2\172\36\5\11\0"+
    "\2\6\3\0\1\6\2\0\10\6\2\173\36\6\11\0"+
    "\2\5\3\0\1\5\2\0\4\5\2\174\42\5\11\0"+
    "\2\6\3\0\1\6\2\0\4\6\2\175\42\6\11\0"+
    "\2\5\3\0\1\5\2\0\34\5\2\176\12\5\11\0"+
    "\2\5\3\0\1\5\2\0\10\5\2\177\36\5\11\0"+
    "\2\5\3\0\1\5\2\0\14\5\2\200\32\5\11\0"+
    "\2\6\3\0\1\6\2\0\34\6\2\201\12\6\11\0"+
    "\2\6\3\0\1\6\2\0\10\6\2\202\36\6\11\0"+
    "\2\6\3\0\1\6\2\0\14\6\2\203\32\6\11\0"+
    "\2\5\3\0\1\5\2\0\2\204\46\5\11\0\2\6"+
    "\3\0\1\6\2\0\2\205\46\6\11\0\2\5\3\0"+
    "\1\5\2\0\24\5\2\206\22\5\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\207\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\24\6\2\210\22\6\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\211\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\32\5\2\212\14\5\11\0\2\5\3\0"+
    "\1\5\2\0\2\5\2\213\44\5\11\0\2\6\3\0"+
    "\1\6\2\0\32\6\2\214\14\6\11\0\2\6\3\0"+
    "\1\6\2\0\2\6\2\215\44\6\11\0\2\5\3\0"+
    "\1\5\2\0\10\5\2\216\36\5\11\0\2\6\3\0"+
    "\1\6\2\0\10\6\2\217\36\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\220\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\221\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\222\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\223\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\6\5\2\224\40\5\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\225\42\5\11\0\2\5\3\0"+
    "\1\5\2\0\6\5\2\226\40\5\11\0\2\6\3\0"+
    "\1\6\2\0\6\6\2\227\40\6\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\230\42\6\11\0\2\6\3\0"+
    "\1\6\2\0\6\6\2\231\40\6\11\0\2\5\3\0"+
    "\1\5\2\0\10\5\2\232\36\5\11\0\2\6\3\0"+
    "\1\6\2\0\10\6\2\233\36\6\11\0\2\5\3\0"+
    "\1\5\2\0\6\5\2\234\40\5\11\0\2\5\3\0"+
    "\1\5\2\0\16\5\2\235\30\5\11\0\2\6\3\0"+
    "\1\6\2\0\6\6\2\236\40\6\11\0\2\6\3\0"+
    "\1\6\2\0\16\6\2\237\30\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\240\42\5\11\0\2\5\3\0"+
    "\1\5\2\0\10\5\2\241\36\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\242\42\6\11\0\2\6\3\0"+
    "\1\6\2\0\10\6\2\243\36\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\244\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\245\42\6\11\0\2\5\3\0"+
    "\1\5\2\0\20\5\2\246\26\5\11\0\2\5\3\0"+
    "\1\5\2\0\16\5\2\247\30\5\11\0\2\6\3\0"+
    "\1\6\2\0\20\6\2\250\26\6\11\0\2\6\3\0"+
    "\1\6\2\0\16\6\2\251\30\6\11\0\2\5\3\0"+
    "\1\5\2\0\2\5\2\252\44\5\11\0\2\6\3\0"+
    "\1\6\2\0\2\6\2\253\44\6\11\0\2\5\3\0"+
    "\1\5\2\0\2\5\2\254\44\5\11\0\2\6\3\0"+
    "\1\6\2\0\2\6\2\255\44\6\11\0\2\5\3\0"+
    "\1\5\2\0\4\5\2\256\42\5\11\0\2\6\3\0"+
    "\1\6\2\0\4\6\2\257\42\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\31\1\5\11"+
    "\1\0\1\1\1\0\1\11\206\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return symbol(sym.UPDATE);
          }
        case 30: break;
        case 20: 
          { return symbol(sym.CREATE);
          }
        case 31: break;
        case 28: 
          { return symbol(sym.INTEGER);
          }
        case 32: break;
        case 17: 
          { return symbol(sym.FROM);
          }
        case 33: break;
        case 14: 
          { return symbol(sym.AND);
          }
        case 34: break;
        case 7: 
          { return symbol(sym.PERIOD);
          }
        case 35: break;
        case 21: 
          { return symbol(sym.DELETE);
          }
        case 36: break;
        case 11: 
          { return symbol(sym.SEMI);
          }
        case 37: break;
        case 3: 
          { return symbol(sym.NAME, new String(yytext()));
          }
        case 38: break;
        case 4: 
          { return symbol(sym.VARIABLE, new String(yytext()));
          }
        case 39: break;
        case 23: 
          { return symbol(sym.VALUES);
          }
        case 40: break;
        case 8: 
          { return symbol(sym.LPAREN);
          }
        case 41: break;
        case 19: 
          { return symbol(sym.WHERE);
          }
        case 42: break;
        case 29: 
          { return symbol(sym.DATABASE);
          }
        case 43: break;
        case 18: 
          { return symbol(sym.TABLE);
          }
        case 44: break;
        case 13: 
          { return symbol(sym.STRING, new String(yytext()));
          }
        case 45: break;
        case 24: 
          { return symbol(sym.INSERT);
          }
        case 46: break;
        case 10: 
          { return symbol(sym.COMMA);
          }
        case 47: break;
        case 26: 
          { return symbol(sym.DECIMAL);
          }
        case 48: break;
        case 12: 
          { return symbol(sym.STAR);
          }
        case 49: break;
        case 27: 
          { return symbol(sym.VARCHAR);
          }
        case 50: break;
        case 15: 
          { return symbol(sym.SET);
          }
        case 51: break;
        case 16: 
          { return symbol(sym.INTO);
          }
        case 52: break;
        case 9: 
          { return symbol(sym.RPAREN);
          }
        case 53: break;
        case 1: 
          { System.out.println("Syntax Error - Scanning Error");
                          return symbol(sym.ERROR);
          }
        case 54: break;
        case 2: 
          { /* do nothing */
          }
        case 55: break;
        case 22: 
          { return symbol(sym.SELECT);
          }
        case 56: break;
        case 6: 
          { return symbol(sym.NUMBER, new String(yytext()));
          }
        case 57: break;
        case 5: 
          { return symbol(sym.COMPARISON, new String(yytext()));
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
